<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Dashboard</title>
    <link href="../static/css/Dashboard.css" rel="stylesheet" type="text/css">

    <script src="../static/js/dashboard_data.js" type="application/javascript"></script>
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
    <!--<script src="dashboard_weather.js" type="module"></script>-->
    
    
    <script src="https://cdnjs.cloudflare.com/ajax/libs/moment.js/2.29.1/moment.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/chartjs-adapter-moment@^0.1.0/dist/chartjs-adapter-moment.min.js"></script>


</head>
<body>
    
    <div id="title">
        <h1>Dashboard</h1>
    </div>
    
    <div id="services_status_display">
        <div id="service_div" style="border-bottom: none;">
            <div id="service_name">
                <h4>Database</h4>
            </div>
            <div id="service_status_db" class="service_status">
                <p><%=  %></p>
            </div>
        </div>
        <div id="service_div">
            <div id="service_name">
                <h4>MQTT</h4>
            </div>
            <div id="service_status_mqtt" class="service_status">
                <p><%=  %></p>
            </div>
        </div>
        <h2 id="counter"><%= data.counter %></h2>
        
    </div>
    <div id="topics_dislpay">
        <div id="topic_div">
            <div id="topic_name">
                <h4>device/temp</h4>
            </div>
            <div id="topic_value">
                <%= data.temp_value %>
                <p id="db_entries_counter" class="db_entries_counter"><% %></p>
            </div>
        </div>
        <div id="topic_div">
            <div id="topic_name">
                <h4>device/hum</h4>
            </div>
            <div id="topic_value">
                <%= data.hum_value %>
            </div>
        </div>
        <div id="topic_div">
            <div id="topic_name">
                <h4>device/client_ip</h4>
            </div>
            <div id="topic_value">
                <%= data.client_ip_value %>
            </div>
        </div>
        <div id="topic_div">
            <div id="topic_name">
                <h4>device/client_id</h4>
            </div>
            <div id="topic_value">
                <%= data.client_id_value %>
            </div>
        </div>
    </div>
    
    <div>
        <canvas id="temp_chart" width="400", height="100">

        </canvas>
        <canvas id="hum_chart" width="400", height="100">

        </canvas>
        <form onsubmit="handleSubmit(event)">
            
            <button type="submit">Submit</button>
        </form>
    </div>

    <script>
        const not_unique_device_ids = [];

        const device1_temp = [];
        const device2_temp = [];
        const device3_temp = [];

        const device1_hum = [];
        const device2_hum = [];
        const device3_hum = [];

        const tempDataFromDB = [
            { label: 'Device 1', values: device1_temp, fill: false, borderColor: 'rgb(75, 192, 192)', tension: 0.1 },
            { label: 'Device 2', values: device2_temp, fill: false, borderColor: 'rgb(255, 75, 25)', tension: 0.1 },
            { label: 'Device 3', values: device3_temp, fill: false, borderColor: 'rgb(130, 130, 130)', tension: 0.1 }
        ];

        const humDataFromDB = [
            { label: 'Device 1', values: device1_hum, fill: false, borderColor: 'rgb(75, 192, 192)', tension: 0.1 },
            { label: 'Device 2', values: device2_hum, fill: false, borderColor: 'rgb(255, 75, 25)', tension: 0.1 },
            { label: 'Device 3', values: device3_hum, fill: false, borderColor: 'rgb(130, 130, 130)', tension: 0.1 }
        ];

        function fetchTempData() {
            fetch('/api/data_dashboard/weather')
                .then(response => response.json())
                .then(dataFromBackend => {
                    for(let i = 0; i < Object.getOwnPropertyNames(dataFromBackend).length; i++) {
                        if (dataFromBackend[i].device_id == 1) {
                            not_unique_device_ids.push(dataFromBackend[i].device_id);
                            //device1_labels.push(dataFromBackend[i].date);
                            device1_temp.push({x: dataFromBackend[i].date, y: dataFromBackend[i].temperature});
                            device1_hum.push({x: dataFromBackend[i].date, y: dataFromBackend[i].humidity});
                        }
                        else if (dataFromBackend[i].device_id == 6) {
                            not_unique_device_ids.push(dataFromBackend[i].device_id);
                            //device2_labels.push(dataFromBackend[i].date);
                            device2_temp.push({x: dataFromBackend[i].date, y: dataFromBackend[i].temperature});
                            device2_hum.push({x: dataFromBackend[i].date, y: dataFromBackend[i].humidity});
                        }
                        else if (dataFromBackend[i].device_id == 23) {
                            not_unique_device_ids.push(dataFromBackend[i].device_id);
                            //device3_labels.push(dataFromBackend[i].date);
                            device3_temp.push({x: dataFromBackend[i].date, y: dataFromBackend[i].temperature});
                            device3_hum.push({x: dataFromBackend[i].date, y: dataFromBackend[i].humidity});
                        }
                    }

                    const tempDatasets = tempDataFromDB.map((data) => {
                        return {
                            label: data.label,
                            data: data.values,
                            fill: data.fill, 
                            borderColor: data.borderColor, 
                            tension: data.tension
                        }
                    })

                    const humDatasets = humDataFromDB.map((data) => {
                        return {
                            label: data.label,
                            data: data.values,
                            fill: data.fill, 
                            borderColor: data.borderColor, 
                            tension: data.tension
                        }
                    })

                    temp_chart.data.datasets = tempDatasets;
                    hum_chart.data.datasets = humDatasets;

                    temp_chart.update();
                    hum_chart.update();
                    
                })
        }
            
        fetchTempData();
        
        const ctx_temp = document.getElementById('temp_chart');
        const ctx_hum = document.getElementById('hum_chart');

        const temp_chart = new Chart(ctx_temp, {
            type: 'line',
            data: {
                labels: [   '01:00', '02:00', '03:00', '04:00', '05:00', '06:00', '07:00', '08:00', '09:00', '10:00', '11:00', '12:00',
                        '13:00', '14:00', '15:00', '16:00', '17:00', '18:00', '19:00', '20:00', '21:00', '22:00', '23:00', '24:00'],
                datasets: []
            },
            options: {
                scales: {
                    x: {
                        type: 'time',
                        time: {
                            unit: 'hour',
                            displayFormats: {
                                hour: 'HH:mm'
                            }
                        },
                        ticks: {
                            source: 'data'
                        }
                    },
                    y: {

                    }
                }
            }
        })

        const hum_chart = new Chart(ctx_hum, {
            type: 'line',
            data: {
                datasets: []
            },
            options: {
                scales: {
                    x: {
                        type: 'time',
                        time: {
                            unit: 'hour',
                            displayFormats: {
                                hour: 'HH:mm'
                            }
                        },
                        ticks: {
                            source: 'data'
                        }
                    },
                    y: {

                    }
                }
            }
        })

    </script>
    <script>
        function handleSubmit(event) {
            event.preventDefault();

            console.log("Form submitted without reloading the page");
        }
    </script>

</body>
</html>