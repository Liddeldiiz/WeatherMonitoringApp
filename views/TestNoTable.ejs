<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Test</title>
    <link href="../static/css/Global.css" rel="stylesheet" type="text/css">
    <link href="../static/css/TestNoTable.css" rel="stylesheet" type="text/css">
    <!--<link href="../static/css/TestOutgoing.css" rel="stylesheet" type="text/css">-->
</head>
<body>
    <div class="navbar">
        <svg viewBox="0 0 24 24" class="svg-db" id="svg-db">
            <path d="M20 18C20 20.2091 16.4183 22 12 22C7.58172 22 4 20.2091 4 18V13.974C4.50221 14.5906 5.21495 15.1029 6.00774 15.4992C7.58004 16.2854 9.69967 16.75 12 16.75C14.3003 16.75 16.42 16.2854 17.9923 15.4992C18.7851 15.1029 19.4978 14.5906 20 13.974V18Z"/>
            <path d="M12 10.75C14.3003 10.75 16.42 10.2854 17.9923 9.49925C18.7851 9.10285 19.4978 8.59059 20 7.97397V12C20 12.5 18.2143 13.5911 17.3214 14.1576C15.9983 14.8192 14.118 15.25 12 15.25C9.88205 15.25 8.00168 14.8192 6.67856 14.1576C5.5 13.5683 4 12.5 4 12V7.97397C4.50221 8.59059 5.21495 9.10285 6.00774 9.49925C7.58004 10.2854 9.69967 10.75 12 10.75Z"/>
            <path d="M17.3214 8.15761C15.9983 8.81917 14.118 9.25 12 9.25C9.88205 9.25 8.00168 8.81917 6.67856 8.15761C6.16384 7.95596 5.00637 7.31492 4.2015 6.27935C4.06454 6.10313 4.00576 5.87853 4.03988 5.65798C4.06283 5.50969 4.0948 5.35695 4.13578 5.26226C4.82815 3.40554 8.0858 2 12 2C15.9142 2 19.1718 3.40554 19.8642 5.26226C19.9052 5.35695 19.9372 5.50969 19.9601 5.65798C19.9942 5.87853 19.9355 6.10313 19.7985 6.27935C18.9936 7.31492 17.8362 7.95596 17.3214 8.15761Z"/>
        </svg>
        <svg viewBox="0 0 16 16" class="svg-mqtt" id="svg-mqtt"><path fill-rule="evenodd" d="M8 0a2.25 2.25 0 00-.75 4.372v.465a3.25 3.25 0 00-1.797 1.144l-.625-.366a2.25 2.25 0 10-1.038 1.13l1.026.602a3.261 3.261 0 000 1.306l-1.026.601a2.25 2.25 0 101.038 1.13l.625-.366a3.25 3.25 0 001.797 1.145v.465a2.25 2.25 0 101.5 0v-.465a3.25 3.25 0 001.797-1.145l.625.366a2.25 2.25 0 101.038-1.13l-1.026-.6a3.26 3.26 0 000-1.307l1.026-.601a2.25 2.25 0 10-1.038-1.13l-.625.365A3.251 3.251 0 008.75 4.837v-.465A2.25 2.25 0 008 0zm-.75 2.25a.75.75 0 111.5 0 .75.75 0 01-1.5 0zM2.75 4a.75.75 0 100 1.5.75.75 0 000-1.5zm0 6.5a.75.75 0 100 1.5.75.75 0 000-1.5zm4.5 3.25a.75.75 0 111.5 0 .75.75 0 01-1.5 0zm6-3.25a.75.75 0 100 1.5.75.75 0 000-1.5zm0-6.5a.75.75 0 100 1.5.75.75 0 000-1.5zM6.395 7.3a1.75 1.75 0 113.21 1.4 1.75 1.75 0 01-3.21-1.4z" clip-rule="evenodd"/></svg>
        <a href="/settings"><p>Settings</p></a>
    </div>
    
    <div class="second-row">
        <div class="mqtt-bar">
            <div class="mqtt-messages">
                <div class="mqtt-incoming", id="mqtt-incoming-id">
                    
                </div>
                <div class="mqtt-outgoing", id="mqtt-outgoing-id">
                    
                </div>
            </div>
            <div class="mqtt-topics">
                <table id="topic-table">
                    <%= %>
                </table>
            </div>
        </div>
        <div class="device-bar">
            <table id="device-table">
                <%= %>
            </table>
        </div>
    </div>
    <div class="third-row">
        <p>Charts</p>
        
    </div>
    <!-- Get DB and MQTT Status from backend -->
    <script>

    var data = '<%= data %>';

    const nodeArrDevices_incoming = []; // used in devices
    const nodeArrTopics_incoming = [];
    const nodeArrMsg_incoming = [];
    const nodeArrJsonMsg_incoming = [];

    const nodeArrDevices_outgoing = [];
    const nodeArrTopics_outgoing = [];
    const nodeArrMsg_outgoing = [];
    const nodeArrJsonMsg_outgoing = [];

    /////////////////////////////////// FUNCTIONS ///////////////////////////////////

    function createNodeWithParams(node_element, text, id, flag, id_self, class_self) {
        if (flag === 0) {
            let node = document.createElement(node_element);
            let text_node = document.createTextNode(text);
            node.appendChild(text_node);
            document.getElementById(id).appendChild(node);
        }
        else if (flag === 1) {
            let node = document.createElement(node_element);
            let text_node = document.createTextNode(text);
            node.id = id_self;
            node.className = class_self;
            node.appendChild(text_node);
            document.getElementById(id).appendChild(node);
        }
    }

    function createRowsForTableWithParams(dataFromBackend, id, parent, flag, arr) {
        
        
        for (let i = 0; i < Object.getOwnPropertyNames(dataFromBackend).length  + flag; i++) {
            let node = document.createElement('tr');
            let counter = arr.length;
            node.id = `row-${i}-${parent}`;
            node.className = `row-${i}-${parent}`;
            arr.push(node);
            document.getElementById(id).appendChild(arr[i]);
        }
        
    }

    function createRowsForTableWithParams_Devices(dataFromBackend, id, parent, flag, arr) {
        
        if (nodeArrDevices_incoming.length = 0) {
            for (let i = 0; i < Object.getOwnPropertyNames(dataFromBackend).length  + flag; i++) {
                let node = document.createElement('tr');
                node.id = `row-${i}-${parent}`;
                node.className = `row-${i}-${parent}`;
                arr.push(node);
                document.getElementById(id).appendChild(arr[i]);
            }
        } else {
            for (let i = 0; i < Object.getOwnPropertyNames(dataFromBackend).length  + flag; i++) {
                let node = document.createElement('tr');
                let counter = arr.length - 1;
                node.id = `${counter}-row-${parent}`;
                arr.push(node);
                document.getElementById(id).appendChild(arr[i]);
            }
        }
    }
    
    function createMouseoverAndMouseoutEventListener(element, element_state, element_name) {
        element.addEventListener('mouseover', (event) => {
            var tooltip = document.createElement('div');
            tooltip.className = 'tooltip';
            if (element_state) {
                tooltip.innerText = `${element_name} is Connected`;
            } else {
                tooltip.innerText = `${element_name} is not Connected!`;
            }

            // Position the tooltip relative to the mouse cursor
            tooltip.style.left = (event.pageX + 10) + "px";
            tooltip.style.top = (event.pageY + 10) + "px";

            // Append the tooltip to the document body
            document.body.appendChild(tooltip);
        })

        element.addEventListener('mouseout', function() {
            var tooltips = document.getElementsByClassName('tooltip');

            // Remove all existing tooltips
            while(tooltips.length > 0) {
                tooltips[0].parentNode.removeChild(tooltips[0]);
            }
        })
    }

    function createMsgForWeatherData(updatedData) {
        let node_incomingMsg = document.createElement('td');
        //node_incomingMsg.id = 'msg-th';

        // creating inner table for the message property from backend json
        let node_incomingMsg_table = document.createElement('table');
        node_incomingMsg_table.id = 'incomingMsg-inner-table';
        node_incomingMsg_table.className = 'incomingMsg-inner-table';

        // appending the inner table to the second column second row dom object
        node_incomingMsg.appendChild(node_incomingMsg_table);
        node_incomingMsg.id = 'incomingMsg-message-col';

        // appending the second row seconde column dom object to the existing row id
        document.getElementById(nodeArrMsg_incoming[1].id).appendChild(node_incomingMsg);

        // creating new rows for the inner table -> new array needed here (nodeArrJsonMsg)
        createRowsForTableWithParams(updatedData.incomingMsg.message, node_incomingMsg_table.id, 'incoming-msg', 0, nodeArrJsonMsg_incoming);

        //console.log("nodeArrMsg: ", nodeArrMsg);
        createNodeWithParams('td', updatedData.incomingMsg.message.device_id, nodeArrJsonMsg_incoming[0].id, 1, 'device', 'message');
        createNodeWithParams('td', updatedData.incomingMsg.message.temperature, nodeArrJsonMsg_incoming[1].id, 1, 'temperature', 'message');
        createNodeWithParams('td', updatedData.incomingMsg.message.humidity, nodeArrJsonMsg_incoming[2].id, 1, 'humidity', 'message');

        // perhaps I will need to get rid of the elements in this array
    
        console.log('Message added');
    }

    function createTableForDeviceSetup(updatedData) {
        let node_outgoingMsg = document.createElement('td');
        //node_outgoingMsg.id = 'msg-th';

        // creating inner table for the message property from backend json
        let node_outgoingMsg_table = document.createElement('table');
        node_outgoingMsg_table.id = 'outgoingMsg-inner-table';

        // appending the inner table to the second column second row dom object
        node_outgoingMsg.appendChild(node_outgoingMsg_table);
        node_outgoingMsg.id = 'outgoingMsg-message-col';

        // appending the second row seconde column dom object to the existing row id
        document.getElementById(nodeArrMsg_outgoing[1].id).appendChild(node_outgoingMsg);

        // creating new rows for the inner table -> new array needed here (nodeArrJsonMsg)
        createRowsForTableWithParams(updatedData.outgoingMsg.message, node_outgoingMsg_table.id, 'outgoing-msg', 0, nodeArrJsonMsg_outgoing);

        
        //console.log("nodeArrMsg: ", nodeArrMsg);
        createNodeWithParams('td', updatedData.outgoingMsg.message.device_ip, nodeArrJsonMsg_outgoing[0].id, 1, 'device_ip', 'message');
        createNodeWithParams('td', updatedData.outgoingMsg.message.device_id, nodeArrJsonMsg_outgoing[1].id, 1, 'device_id', 'message');
        

        // perhaps I will need to get rid of the elements in this array
    
        console.log('Message added');
    }

    function fetchDataAndUpdate() {
        fetch('/api/data_test/data')
            .then(response => response.json())
            .then(updatedData => {

                console.log(updatedData)
                const db_icon = document.getElementById('svg-db');
                const mqtt_icon = document.getElementById('svg-mqtt');

                createMouseoverAndMouseoutEventListener(db_icon, updatedData.service_status_db, 'Database')
                createMouseoverAndMouseoutEventListener(mqtt_icon, updatedData.service_status_mqtt, 'Mosquitto')

                if (updatedData.service_status_db) {
                    db_icon.style.fill = 'green';
                } else {
                    db_icon.style.fill = 'grey';
                }
                
                if (updatedData.service_status_mqtt) {
                    mqtt_icon.style.fill = 'green';
                } else {
                    mqtt_icon.style.fill = 'red';
                }
                    
                //// INCOMING MESSAGES ////
                if (Object.keys(updatedData.incomingMsg).length === 0) {
                    var empty_body_string = 'empty-incoming-msg-body';
                    const empty_body_div = document.getElementById(empty_body_string)
                    if (empty_body_div== null) {
                        console.log(`creating "${empty_body_string}"`);
                        let node = document.createElement('p');
                        let text_node = document.createTextNode('No messages yet');
                        node.appendChild(text_node);
                        node.id = empty_body_string;
                        node.className = empty_body_string;
                        document.getElementById('mqtt-incoming-id').appendChild(node);
                    }
                    
                } else {
                    if (document.getElementById('empty-incoming-msg-body') != null) {
                        document.getElementById('empty-incoming-msg-body').remove();
                        console.log('removed "empty-incoming-msg-body"!');
                    }
                    
                    if (document.getElementById('incomingMsg-topic') == null) {

                        // Creating divs for the json values from backend
                        console.log('creating incomingMsg-topic');

                        let node_topic = document.createElement('div');
                        node_topic.id = 'incomingMsg-topic';
                        node_topic.className = 'incomingMsg-topic';
                        document.getElementById('mqtt-incoming-id').appendChild(node_topic);
                        document.getElementById('incomingMsg-topic').textContent = '';

                        console.log('creating incomingMsg-message');
                        let node_message = document.createElement('div');
                        node_message.id = 'incomingMsg-message';
                        node_message.className = 'incomingMsg-message';
                        document.getElementById('mqtt-incoming-id').appendChild(node_message);
                        document.getElementById('incomingMsg-message').textContent = '';

                        console.log('creating header columns');
                        // Create header columns

                        let node_topic_title = document.createElement('div');
                        node_topic_title.id = 'incomingMsg-topic-title';
                        node_topic_title.className = 'incomingMsg-topic-title';
                        document.getElementById('incomingMsg-topic').appendChild(node_topic_title);
                        document.getElementById('incomingMsg-topic-title').textContent = 'Topic';

                        let node_topic_message = document.createElement('div');
                        node_topic_message.id = 'incomingMsg-message-title';
                        node_topic_message.className = 'incomingMsg-message-title';
                        document.getElementById('incomingMsg-message').appendChild(node_topic_message);
                        document.getElementById('incomingMsg-message-title').textContent = 'Message';

                        // Populating nodeArrTopics with element id's and creating rows

                        /*
                        
                        for (let i = 0; i < Object.getOwnPropertyNames(updatedData.incomingMsg).length; i++) {
                            let node = document.createElement('div');
                            node.id = `row-${i}-incomingMsg`;
                            node.className = `row-${i}-incomingMsg`;
                            nodeArrMsg_incoming.push(node);
                            document.getElementById('incomingMsg-table').appendChild(nodeArrMsg_incoming[i]);
                        }
                        */
                        /*
                        console.log('creating header columns');
                        // Create header columns
                        createNodeWithParams('th', 'Topic', nodeArrMsg_incoming[0].id, 1, 'topic', 'topic');
                        createNodeWithParams('th', 'Message', nodeArrMsg_incoming[0].id, 1, 'message', 'message');
*/

                        let node_topic_content = document.createElement('div');
                        node_topic_content.id = 'incomingMsg-topic-content';
                        node_topic_content.className = 'incomingMsg-topic-content';
                        document.getElementById('incomingMsg-topic').appendChild(node_topic_content);
                        document.getElementById('incomingMsg-topic-content').textContent = updatedData.incomingMsg.topic;

                        let node_message_content = document.createElement('div');
                        node_message_content.id = 'incomingMsg-message-content';
                        node_message_content.className = 'incomingMsg-message-content';
                        document.getElementById('incomingMsg-message').appendChild(node_message_content);
                        //document.getElementById('incomingMsg-message-content').textContent = updatedData.incomingMsg.topic;

                        const keysArr = Object.getOwnPropertyNames(updatedData.incomingMsg.message);

                        console.log('keysArr.length == ', keysArr.length);
                        // Create row with info from json

                        if(updatedData.incomingMsg.topic === 'weather/data') {
                            for(let i = 0; i < keysArr.length; i++) {
                            // Message
                            // creating the second column of the second row                                                        
                                let node_message_content_row = document.createElement('div');
                                node_message_content_row.id = `incomingMsg-message-content-${i}`;
                                node_message_content_row.className = 'incomingMsg-message-content-row';
                                document.getElementById('incomingMsg-message-content').appendChild(node_message_content_row);

                                let node_message_content_row_column_key = document.createElement('div');
                                node_message_content_row_column_key.id = `incomingMsg-message-content-row-${i}-column-key`;
                                node_message_content_row_column_key.className = `incomingMsg-message-content-row-column-key`;
                                document.getElementById(node_message_content_row.id).appendChild(node_message_content_row_column_key);
                                document.getElementById(node_message_content_row_column_key.id).textContent = keysArr[i];

                                let node_message_content_row_column_value = document.createElement('div');
                                node_message_content_row_column_value.id = `incomingMsg-message-content-row-${i}-column-value`;
                                node_message_content_row_column_value.className = `incomingMsg-message-content-row-column-value`;
                                document.getElementById(node_message_content_row.id).appendChild(node_message_content_row_column_value);
                                document.getElementById(node_message_content_row_column_value.id).textContent = updatedData.incomingMsg.message[keysArr[i]];


                            
                            //createMsgForWeatherData(updatedData)
                                                      
                            }
                        } else if (updatedData.incomingMsg.topic === 'device/client_ip') {
                            let node_message_content_row = document.createElement('div');
                            node_message_content_row.id = `incomingMsg-message-content-${0}`;
                            node_message_content_row.className = 'incomingMsg-message-content-row';
                            document.getElementById('incomingMsg-message-content').appendChild(node_message_content_row);
                            document.getElementById(`incomingMsg-message-content-${0}`).textContent = updatedData.incomingMsg.message;
                        }
                        
                        
                    } else {
                        // Update the topic
                        document.getElementById('incomingMsg-topic-content').textContent = updatedData.incomingMsg.topic;
                        

                        // Update the Message
                        while(document.getElementById('incomingMsg-message-content').firstChild) {
                            document.getElementById('incomingMsg-message-content').removeChild(document.getElementById('incomingMsg-message-content').firstChild);
                        }
                        
                        const keysArr = Object.getOwnPropertyNames(updatedData.incomingMsg.message);

                        console.log('keysArr.length == ', keysArr.length);
                        // Create row with info from json
                        if(updatedData.incomingMsg.topic === 'weather/data') {
                            for(let i = 0; i < keysArr.length; i++) {
                                // Message
                                // creating the second column of the second row                                                        
                                let node_message_content_row = document.createElement('div');
                                node_message_content_row.id = `incomingMsg-message-content-${i}`;
                                node_message_content_row.className = 'incomingMsg-message-content-row';
                                document.getElementById('incomingMsg-message-content').appendChild(node_message_content_row);

                                let node_message_content_row_column_key = document.createElement('div');
                                node_message_content_row_column_key.id = `incomingMsg-message-content-row-${i}-column-key`;
                                node_message_content_row_column_key.className = `incomingMsg-message-content-row-column-key`;
                                document.getElementById(node_message_content_row.id).appendChild(node_message_content_row_column_key);
                                document.getElementById(node_message_content_row_column_key.id).textContent = keysArr[i];

                                let node_message_content_row_column_value = document.createElement('div');
                                node_message_content_row_column_value.id = `incomingMsg-message-content-row-${i}-column-value`;
                                node_message_content_row_column_value.className = `incomingMsg-message-content-row-column-value`;
                                document.getElementById(node_message_content_row.id).appendChild(node_message_content_row_column_value);
                                document.getElementById(node_message_content_row_column_value.id).textContent = updatedData.incomingMsg.message[keysArr[i]];            
                            }
                        } else if (updatedData.incomingMsg.topic === 'device/client_ip') {
                            let node_message_content_row = document.createElement('div');
                            node_message_content_row.id = `incomingMsg-message-content-${0}`;
                            node_message_content_row.className = 'incomingMsg-message-content-row';
                            document.getElementById('incomingMsg-message-content').appendChild(node_message_content_row);
                            document.getElementById(`incomingMsg-message-content-${0}`).textContent = updatedData.incomingMsg.message;
                        }
                            
                        }
                        
                    }
                

                //// OUTGOING MESSAGES ////
                console.log('outgoingMsg length = ', Object.keys(updatedData.outgoingMsg).length)
                if (Object.keys(updatedData.outgoingMsg).length === 0) {
                    
                    var empty_body_string = 'empty-outgoing-msg-body';
                    const empty_body_div = document.getElementById(empty_body_string)
                    if (empty_body_div== null) {
                        console.log(`creating "${empty_body_string}"`);
                        let node = document.createElement('p');
                        let text_node = document.createTextNode('No messages yet');
                        node.appendChild(text_node);
                        node.id = empty_body_string;
                        node.className = empty_body_string;
                        document.getElementById('mqtt-outgoing-id').appendChild(node);
                    }
                } else {
                    if (document.getElementById('empty-outgoing-msg-body') != null) {
                        document.getElementById('empty-outgoing-msg-body').remove();
                        console.log('removed "empty-outgoing-msg-body"!');
                    }

                    if (document.getElementById('outgoingMsg-topic') == null) {

                        // Creating a table for the json values from backend
                        console.log('creating outgoingMsg-topic');

                        let node_topic = document.createElement('div');
                        node_topic.id = 'outgoingMsg-topic';
                        node_topic.className = 'outgoingMsg-topic';
                        document.getElementById('mqtt-outgoing-id').appendChild(node_topic);
                        document.getElementById('outgoingMsg-topic').textContent = '';

                        console.log('creating outgoingMsg-message');

                        let node_message = document.createElement('div');
                        node_message.id = 'outgoingMsg-message';
                        node_message.className = 'outgoingMsg-message';
                        document.getElementById('mqtt-outgoing-id').appendChild(node_message);
                        document.getElementById('outgoingMsg-message').textContent = '';

                        console.log('creating header columns');
                        // Create header columns

                        let node_topic_title = document.createElement('div');
                        node_topic_title.id = 'outgoingMsg-topic-title';
                        node_topic_title.className = 'outgoingMsg-topic-title';
                        document.getElementById('outgoingMsg-topic').appendChild(node_topic_title);
                        document.getElementById('outgoingMsg-topic-title').textContent = 'Topic';

                        let node_message_title = document.createElement('div');
                        node_message_title.id = 'outgoingMsg-message-title';
                        node_message_title.className = 'outgoingMsg-message-title';
                        document.getElementById('outgoingMsg-message').appendChild(node_message_title);
                        document.getElementById('outgoingMsg-message-title').textContent = 'Message';

                        // Populating nodeArrTopics with element id's and creating rows

                        /*
                        for (let i = 0; i < Object.getOwnPropertyNames(updatedData.outgoingMsg).length; i++) {
                            let node = document.createElement('tr');
                            node.id = `row-${i}-outgoingMsg`;
                            node.className = `row-${i}-outgoingMsg`;
                            nodeArrMsg_outgoing.push(node);
                            document.getElementById('outgoingMsg-table').appendChild(nodeArrMsg_outgoing[i]);
                        }

                        console.log('creating header columns');
                        // Create header columns
                        createNodeWithParams('th', 'Topic', nodeArrMsg_outgoing[0].id, 1, 'topic_outgoing', 'topic_outgoing');
                        createNodeWithParams('th', 'Message', nodeArrMsg_outgoing[0].id, 1, 'message_outgoing', 'message_outgoing');
*/
                        let node_topic_content = document.createElement('div');
                        node_topic_content.id = 'outgoingMsg-topic-content';
                        node_topic_content.className = 'outgoingMsg-topic-content';
                        document.getElementById('outgoingMsg-topic').appendChild(node_topic_content);
                        document.getElementById('outgoingMsg-topic-content').textContent = updatedData.incomingMsg.topic;

                        let node_message_content = document.createElement('div');
                        node_message_content.id = 'outgoingMsg-message-content';
                        node_message_content.className = 'outgoingMsg-message-content';
                        document.getElementById('outgoingMsg-message').appendChild(node_message_content);

                        const keysArr = Object.getOwnPropertyNames(updatedData.outgoingMsg.message);

                        console.log('keysArr.length == ', keysArr.length);

                        // Create row with info from json
                        if(updatedData.outgoingMsg.topic === 'device/setup')  {
                            for(let i = 0; i < keysArr.length; i++) {
                            // Message
                            // creating the second column of the second row                                                        
                                let node_message_content_row = document.createElement('div');
                                node_message_content_row.id = `outgoingMsg-message-content-${i}`;
                                node_message_content_row.className = 'outgoingMsg-message-content-row';
                                document.getElementById('outgoingMsg-message-content').appendChild(node_message_content_row);

                                let node_message_content_row_column_key = document.createElement('div');
                                node_message_content_row_column_key.id = `outgoingMsg-message-content-row-${i}-column-key`;
                                node_message_content_row_column_key.className = `outgoingMsg-message-content-row-column-key`;
                                document.getElementById(node_message_content_row.id).appendChild(node_message_content_row_column_key);
                                document.getElementById(node_message_content_row_column_key.id).textContent = keysArr[i];

                                let node_message_content_row_column_value = document.createElement('div');
                                node_message_content_row_column_value.id = `outgoingMsg-message-content-row-${i}-column-value`;
                                node_message_content_row_column_value.className = `outgoingMsg-message-content-row-column-value`;
                                document.getElementById(node_message_content_row.id).appendChild(node_message_content_row_column_value);
                                document.getElementById(node_message_content_row_column_value.id).textContent = updatedData.incomingMsg.message[keysArr[i]];


                            
                            //createMsgForWeatherData(updatedData)
                                                      
                            }
                            //createTableForDeviceSetup(updatedData);
                        }
                    } else {
                    // Update the topic
                    document.getElementById('outgoingMsg-topic-content').textContent = updatedData.outgoingMsg.topic;

                    // Update the Message
                        while(document.getElementById('outgoingMsg-message-content').firstChild) {
                            document.getElementById('outgoingMsg-message-content').removeChild(document.getElementById('outgoingMsg-message-content').firstChild);
                        }

                        const keysArr = Object.getOwnPropertyNames(updatedData.outgoingMsg.message);

                        console.log('keysArr.length == ', keysArr.length);

                        // Create row with info from json
                        if(updatedData.outgoingMsg.topic === 'device/setup')  {
                            for(let i = 0; i < keysArr.length; i++) {
                            // Message
                            // creating the second column of the second row                                                        
                                let node_message_content_row = document.createElement('div');
                                node_message_content_row.id = `outgoingMsg-message-content-${i}`;
                                node_message_content_row.className = 'outgoingMsg-message-content-row';
                                document.getElementById('outgoingMsg-message-content').appendChild(node_message_content_row);

                                let node_message_content_row_column_key = document.createElement('div');
                                node_message_content_row_column_key.id = `outgoingMsg-message-content-row-${i}-column-key`;
                                node_message_content_row_column_key.className = `outgoingMsg-message-content-row-column-key`;
                                document.getElementById(node_message_content_row.id).appendChild(node_message_content_row_column_key);
                                document.getElementById(node_message_content_row_column_key.id).textContent = keysArr[i];

                                let node_message_content_row_column_value = document.createElement('div');
                                node_message_content_row_column_value.id = `outgoingMsg-message-content-row-${i}-column-value`;
                                node_message_content_row_column_value.className = `outgoingMsg-message-content-row-column-value`;
                                document.getElementById(node_message_content_row.id).appendChild(node_message_content_row_column_value);
                                document.getElementById(node_message_content_row_column_value.id).textContent = updatedData.outgoingMsg.message[keysArr[i]];


                            
                            //createMsgForWeatherData(updatedData)
                                                    
                            }

                        }
                }
            }
                //document.getElementById(/*one by one*/);
        })
    } // 11:45

    function grabTopicsListFromDB() {
        fetch('/api/data_test/topics')
            .then(response => response.json())
            .then(dataFromBackend => {

                // Creating the rows for the table
                createRowsForTableWithParams(dataFromBackend, 'topic-table', 'topic', 1, nodeArrTopics_incoming);

                // Setting the Headers for the columns
                createNodeWithParams('th', 'Topics', nodeArrTopics_incoming[0].id, 0);
                createNodeWithParams('th', 'Subscribe', nodeArrTopics_incoming[0].id, 0);
                createNodeWithParams('th', 'Publish', nodeArrTopics_incoming[0].id, 0);

                // Populating the table
                for(let i = 0; i < Object.getOwnPropertyNames(dataFromBackend).length; i++) {

                    // Adding the first property of the json element
                    createNodeWithParams('td', dataFromBackend[i].topic, nodeArrTopics_incoming[i+1].id, 0);

                    // Adding the second property of the json element
                    createNodeWithParams('td', dataFromBackend[i].subscribe, nodeArrTopics_incoming[i+1].id, 0);

                    // Adding the third property of the json element
                    createNodeWithParams('td', dataFromBackend[i].publish, nodeArrTopics_incoming[i+1].id, 0);
                }0
                
            })
    }

    function grabMqttMessages() {
        fetch('/api/data_test/msg')
            .then(response => response.json())
            .then(dataFromBackend => {
                console.log(dataFromBackend);
            })
    }

    function grabDeviceListFromDB() {
        fetch('/api/data_test/devices')
            .then(response => response.json())
            .then(dataFromBackend => {
                //const nodeArr = [];

                // If the device list is already displayed and new data needs to be added
                if (document.getElementById('device-table').rows.length != 0) {
                    var table = document.getElementById('device-table');
                    //console.log(table.children.length);
                    var num_rows = table.rows.length - 1;

                    if (num_rows < Object.getOwnPropertyNames(dataFromBackend).length) {
                        var diff = Object.getOwnPropertyNames(dataFromBackend).length - num_rows;
                        
                        createRowsForTableWithParams(Object.entries(dataFromBackend).slice(num_rows), 'device-table', 'device', 1, nodeArrDevices_incoming);
                        let counter = nodeArrDevices_incoming.length - 1;

                        for(let i = 0; i < diff; i++) {
                            // Adding the first property of the received json
                            createNodeWithParams('td', dataFromBackend[num_rows + i].client_id, nodeArrDevices_incoming[counter+i], 0);

                            // Adding the second property of the received json
                            createNodeWithParams('td', dataFromBackend[num_rows + i].device_id, nodeArrDevices_incoming[counter+i], 0);
                        }
                    }
                } else {
                    // Creating dynamically the number of rows needed for the table depending on the json received
                    createRowsForTableWithParams(dataFromBackend, 'device-table', 'device', 1, nodeArrDevices_incoming);

                    // Setting the Headers for the columns
                    createNodeWithParams('th', 'Client ID', nodeArrDevices_incoming[0].id, 0);
                    createNodeWithParams('th', 'Device ID', nodeArrDevices_incoming[0].id, 0);                    

                    for(let i = 0; i < Object.getOwnPropertyNames(dataFromBackend).length; i++) {

                        // Adding the first property of the received json
                        createNodeWithParams('td', dataFromBackend[i].client_id, nodeArrDevices_incoming[i+1].id, 0);

                        // Adding the second property of the received json
                        createNodeWithParams('td', dataFromBackend[i].device_id, nodeArrDevices_incoming[i+1].id, 0);
                    }
                }
            })
    }

    /////////////////////////////////// CALLING FUNCTIONS ///////////////////////////////////

    setInterval(fetchDataAndUpdate, 10000);

    fetchDataAndUpdate();


    //Grab data for the incoming and outgoing mqtt messages

    // function here


    //Grab topics list from the DB -->

    grabTopicsListFromDB();


    //Grab devices List from the DB

    setInterval(grabDeviceListFromDB, 300000);
    
    grabDeviceListFromDB();

    </script>

</body>
</html>